# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#

'.source.js':
  'Prototype':
    'prefix': 'proto'
    'body': '${1:class_name}.prototype.${2:method_name} = function (${3:first_argument}) {\n\t${0:// body...}\n}'
  'Function':
    'prefix': 'fun'
    'body': 'function ${1:function_name} (${2:argument}) {\n\t${0:// body...}\n}'
  'Generator':
    'prefix': 'gen',
    'body': 'function* ${1:function_name} (${2:argument}) {\n\t${0:// body...}\n}'
  'Immediately-Invoked Function Expression':
    'prefix': 'iife'
    'body': '(function() {\n\t${1:\'use strict\';\n}\t$2\n}())'
  'log':
    'prefix': 'log'
    'body': 'console.log($1)$0'
  'warn':
    'prefix': 'warn'
    'body': 'console.warn($1)$0'
  'error':
    'prefix': 'error'
    'body': 'console.error($1)$0'
  'inspect':
    'prefix': 'inspect'
    'body': 'console.log(require(\'util\').inspect($0, { depth: null }))'
  'new Promise':
    'prefix': 'prom'
    'body': 'new Promise(function(resolve, reject) {\n\t$1\n})$0'
  'setInterval function':
    'prefix': 'interval'
    'body': 'setInterval(${2:function () {\n\t$3\n}}, ${1:10})'
  'setTimeout function':
    'prefix': 'timeout'
    'body': 'setTimeout(${2:function () {\n\t$3\n}}, ${1:10})'
  'CommonJS require':
    'prefix': 'req'
    'body': 'var ${1:module} = require(\'${1:module}\')'
  'Class':
    'prefix': 'class'
    'body': 'class ${1:ClassName} {\n\tconstructor ($2) {\n\t\t$3\n\t}\n}'
  'React component':
    'prefix': 'react'
    'body': """
            const React = require('react')

            class ${1:ClassName} extends React.Component {
              constructor (props) {
                super(props)

                this.state = {}
              }

              render () {
                return (
                  <span>${1:ClassName}</span>
                )
              }
            }

            ${1:ClassName}.displayName = '${1:ClassName}'
            ${1:ClassName}.propTypes = {}

            module.exports = ${1:ClassName}$0
            """
